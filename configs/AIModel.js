const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  

    export const courseOutlineAIModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a study material for java for exam and level of difficulty will be medium with summary of course,List of chapters along with summary for each chapter,Topic list in each chapter in JSON format\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "## Java Study Material: Medium Difficulty\n\nThis study material covers core Java concepts at a medium difficulty level, suitable for exam preparation.  It focuses on practical application and understanding of fundamental concepts.\n\n**Course Summary:** This course provides a comprehensive overview of Java programming fundamentals, including object-oriented programming principles, data structures, exception handling, and input/output operations.  You will learn to write, compile, and debug Java programs, and understand how to apply these concepts to solve real-world problems.  The course emphasizes practical coding exercises and problem-solving.\n\n\n**List of Chapters with Summaries:**\n\n**Chapter 1: Introduction to Java**\n\n* **Summary:** This chapter introduces the history of Java, its features (platform independence, object-oriented nature, etc.), and the Java Development Kit (JDK).  It covers setting up the development environment and writing your first Java program.\n\n**Chapter 2: Data Types and Operators**\n\n* **Summary:** This chapter covers Java's primitive data types (int, float, char, boolean, etc.), operators (arithmetic, logical, bitwise), type casting, and operator precedence.  It emphasizes understanding how different data types are stored and manipulated.\n\n\n**Chapter 3: Control Structures**\n\n* **Summary:** This chapter explains how to control the flow of execution in a Java program using `if-else` statements, `switch` statements, `for` loops, `while` loops, and `do-while` loops.  It covers nested loops and break/continue statements.\n\n**Chapter 4: Object-Oriented Programming (OOP) Concepts**\n\n* **Summary:** This chapter introduces the core principles of OOP: encapsulation, inheritance, polymorphism, and abstraction. It covers classes, objects, methods, constructors, access modifiers, and method overriding/overloading.\n\n**Chapter 5: Arrays and Collections**\n\n* **Summary:** This chapter covers working with arrays in Java, including creating, initializing, and accessing array elements.  It introduces the Collections Framework, including ArrayList, LinkedList, HashSet, HashMap, and their uses.\n\n\n**Chapter 6: Exception Handling**\n\n* **Summary:** This chapter covers exception handling mechanisms in Java using `try-catch` blocks, `finally` blocks, and `throw`/`throws` keywords.  It explains different types of exceptions and best practices for exception handling.\n\n\n**Chapter 7: Input/Output (I/O)**\n\n* **Summary:**  This chapter introduces basic input and output operations in Java, including reading from the console using Scanner and writing to the console using System.out.println(). It also introduces file I/O using FileReader, FileWriter, etc.\n\n\n**Chapter 8: Inheritance and Polymorphism (Advanced)**\n\n* **Summary:** This chapter delves deeper into inheritance (single, multiple, hierarchical) and polymorphism (method overriding, method overloading, runtime polymorphism).  It covers abstract classes and interfaces.\n\n\n**JSON Format of Topic Lists:**\n\n```json\n{\n  \"chapters\": [\n    {\n      \"chapterTitle\": \"Introduction to Java\",\n      \"topics\": [\"Java History\", \"Features of Java\", \"JDK Setup\", \"First Java Program\", \"Compilation and Execution\"]\n    },\n    {\n      \"chapterTitle\": \"Data Types and Operators\",\n      \"topics\": [\"Primitive Data Types\", \"Operators (Arithmetic, Logical, Bitwise)\", \"Type Casting\", \"Operator Precedence\", \"Data Type Conversions\"]\n    },\n    {\n      \"chapterTitle\": \"Control Structures\",\n      \"topics\": [\"if-else statements\", \"switch statements\", \"for loops\", \"while loops\", \"do-while loops\", \"Nested Loops\", \"break/continue\"]\n    },\n    {\n      \"chapterTitle\": \"Object-Oriented Programming (OOP) Concepts\",\n      \"topics\": [\"Encapsulation\", \"Inheritance\", \"Polymorphism\", \"Abstraction\", \"Classes\", \"Objects\", \"Methods\", \"Constructors\", \"Access Modifiers\", \"Method Overriding/Overloading\"]\n    },\n    {\n      \"chapterTitle\": \"Arrays and Collections\",\n      \"topics\": [\"Arrays (Declaration, Initialization, Access)\", \"ArrayList\", \"LinkedList\", \"HashSet\", \"HashMap\", \"Iterators\"]\n    },\n    {\n      \"chapterTitle\": \"Exception Handling\",\n      \"topics\": [\"try-catch blocks\", \"finally blocks\", \"throw/throws keywords\", \"Types of Exceptions\", \"Exception Handling Best Practices\"]\n    },\n    {\n      \"chapterTitle\": \"Input/Output (I/O)\",\n      \"topics\": [\"Scanner class\", \"System.out.println()\", \"File I/O (FileReader, FileWriter)\", \"Buffered Reader/Writer\"]\n    },\n    {\n      \"chapterTitle\": \"Inheritance and Polymorphism (Advanced)\",\n      \"topics\": [\"Single Inheritance\", \"Multiple Inheritance (Interfaces)\", \"Hierarchical Inheritance\", \"Method Overriding\", \"Method Overloading\", \"Runtime Polymorphism\", \"Abstract Classes\", \"Interfaces\"]\n    }\n  ]\n}\n```\n\nThis structured material provides a clear roadmap for your Java exam preparation. Remember to practice coding examples for each topic to solidify your understanding. Good luck!\n"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "Generate a study material for java for exam and level of difficulty will be medium with summary of course,List of chapters along with summary for each chapter,Topic list in each chapter. All result in JSON format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"courseSummary\": \"This course provides a comprehensive overview of Java programming fundamentals at a medium difficulty level, suitable for exam preparation.  It covers core Java concepts, including object-oriented programming, data structures, exception handling, and input/output operations.  The focus is on practical application and understanding of fundamental concepts.\",\n  \"chapters\": [\n    {\n      \"chapterTitle\": \"Introduction to Java\",\n      \"chapterSummary\": \"This chapter introduces the history of Java, its key features (platform independence, object-oriented nature, etc.), and the Java Development Kit (JDK). It covers setting up the development environment and writing a simple Java program.\",\n      \"topics\": [\n        \"Java History and Evolution\",\n        \"Key Features of Java (Platform Independence, Object-Oriented, etc.)\",\n        \"Java Development Kit (JDK) and its components\",\n        \"Setting up the Java Development Environment (IDE, JDK Installation)\",\n        \"Writing and Running your first Java program\",\n        \"Basic Java Syntax and Structure\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Data Types and Operators\",\n      \"chapterSummary\": \"This chapter covers Java's primitive data types (int, float, char, boolean, etc.), operators (arithmetic, logical, bitwise), type casting, and operator precedence. It emphasizes understanding how different data types are stored and manipulated.\",\n      \"topics\": [\n        \"Primitive Data Types (int, float, double, char, boolean, byte, short, long)\",\n        \"Integer Literals and Floating-Point Literals\",\n        \"Arithmetic Operators (+, -, *, /, %)\",\n        \"Logical Operators (&&, ||, !)\",\n        \"Bitwise Operators (&, |, ^, ~, <<, >>, >>>)\",\n        \"Assignment Operators (=, +=, -=, *=, /=, %=)\",\n        \"Type Casting (Implicit and Explicit)\",\n        \"Operator Precedence and Associativity\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Control Structures\",\n      \"chapterSummary\": \"This chapter explains how to control the flow of execution in a Java program using `if-else` statements, `switch` statements, `for` loops, `while` loops, and `do-while` loops. It covers nested loops and break/continue statements.\",\n      \"topics\": [\n        \"if-else statements\",\n        \"Nested if-else statements\",\n        \"switch statement\",\n        \"for loop\",\n        \"while loop\",\n        \"do-while loop\",\n        \"break and continue statements\",\n        \"Nested loops\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Object-Oriented Programming (OOP) Concepts\",\n      \"chapterSummary\": \"This chapter introduces the core principles of OOP: encapsulation, inheritance, polymorphism, and abstraction. It covers classes, objects, methods, constructors, access modifiers, and method overriding/overloading.\",\n      \"topics\": [\n        \"Classes and Objects\",\n        \"Encapsulation (Access Modifiers: public, private, protected)\",\n        \"Constructors\",\n        \"Methods\",\n        \"Inheritance (extends keyword)\",\n        \"Polymorphism (Method Overriding, Method Overloading)\",\n        \"Abstraction (Abstract Classes and Interfaces)\",\n        \"this keyword\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Arrays and Collections\",\n      \"chapterSummary\": \"This chapter covers working with arrays in Java, including creating, initializing, and accessing array elements. It introduces the Collections Framework, including ArrayList, LinkedList, HashSet, and HashMap.\",\n      \"topics\": [\n        \"Arrays (Declaration, Initialization, Access)\",\n        \"Multidimensional Arrays\",\n        \"ArrayList\",\n        \"LinkedList\",\n        \"HashSet\",\n        \"HashMap\",\n        \"Iterators\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Exception Handling\",\n      \"chapterSummary\": \"This chapter covers exception handling mechanisms in Java using `try-catch` blocks, `finally` blocks, and `throw`/`throws` keywords. It explains different types of exceptions and best practices for exception handling.\",\n      \"topics\": [\n        \"Exceptions (Checked and Unchecked)\",\n        \"try-catch-finally blocks\",\n        \"throw keyword\",\n        \"throws keyword\",\n        \"Custom Exceptions\",\n        \"Exception Handling Best Practices\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Input/Output (I/O)\",\n      \"chapterSummary\": \"This chapter introduces basic input and output operations in Java, including reading from the console using Scanner and writing to the console using System.out.println().  It also introduces file I/O concepts.\",\n      \"topics\": [\n        \"System.out.println()\",\n        \"Scanner class\",\n        \"Reading from console\",\n        \"Writing to console\",\n        \"File I/O (Introduction - FileReader, FileWriter)\",\n        \"Basic File Handling\"\n      ]\n    }\n  ]\n}\n```\n"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "Generate a study material for java for exam and level of difficulty will be medium with summary of course.List of chapters along with summary for each chapter.Topic list in each chapter. All result in JSON format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"courseSummary\": \"This course covers fundamental Java programming concepts at a medium difficulty level, preparing students for an exam.  It emphasizes practical application and a solid understanding of core principles, including object-oriented programming, data structures, and exception handling.\",\n  \"chapters\": [\n    {\n      \"chapterTitle\": \"Introduction to Java\",\n      \"chapterSummary\": \"This chapter provides an overview of Java's history, features (platform independence, object-oriented nature), and the Java Development Kit (JDK).  It also covers setting up a development environment and writing a basic Java program.\",\n      \"topics\": [\n        \"Java History and Evolution\",\n        \"Key Features of Java\",\n        \"Java Virtual Machine (JVM)\",\n        \"Java Development Kit (JDK) Components\",\n        \"Setting up the Development Environment (IDE, JDK)\",\n        \"Basic Java Syntax (main method, comments)\",\n        \"Compilation and Execution Process\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Data Types and Operators\",\n      \"chapterSummary\": \"This chapter explores Java's primitive data types (integers, floating-point numbers, characters, booleans), operators (arithmetic, logical, bitwise, assignment), type casting, and operator precedence.\",\n      \"topics\": [\n        \"Primitive Data Types (int, float, double, char, boolean, byte, short, long)\",\n        \"Literals (integer, floating-point, character, string)\",\n        \"Arithmetic Operators (+, -, *, /, %)\",\n        \"Relational Operators (==, !=, >, <, >=, <=)\",\n        \"Logical Operators (&&, ||, !)\",\n        \"Bitwise Operators (&, |, ^, ~, <<, >>, >>>)\",\n        \"Assignment Operators (=, +=, -=, *=, /=, %=)\",\n        \"Increment and Decrement Operators (++ , --)\",\n        \"Type Casting (implicit and explicit)\",\n        \"Operator Precedence and Associativity\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Control Flow Statements\",\n      \"chapterSummary\": \"This chapter covers control flow mechanisms in Java, including conditional statements (if-else, switch) and loops (for, while, do-while).  It also discusses nested loops and break/continue statements.\",\n      \"topics\": [\n        \"if Statement\",\n        \"if-else Statement\",\n        \"Nested if-else Statements\",\n        \"switch Statement\",\n        \"for Loop\",\n        \"while Loop\",\n        \"do-while Loop\",\n        \"break and continue Statements\",\n        \"Nested Loops\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Object-Oriented Programming (OOP)\",\n      \"chapterSummary\": \"This chapter introduces core OOP concepts: encapsulation, inheritance, polymorphism, and abstraction.  It covers classes, objects, methods, constructors, access modifiers, and method overloading/overriding.\",\n      \"topics\": [\n        \"Classes and Objects\",\n        \"Encapsulation (Access Modifiers: public, private, protected)\",\n        \"Constructors (default, parameterized)\",\n        \"Methods (instance methods, static methods)\",\n        \"Inheritance (extends keyword, super keyword)\",\n        \"Polymorphism (method overriding, method overloading)\",\n        \"Abstraction (abstract classes, interfaces)\",\n        \"Method Overriding and Overloading\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Arrays and Collections\",\n      \"chapterSummary\": \"This chapter covers arrays (single and multi-dimensional) and introduces the Java Collections Framework, focusing on ArrayList, LinkedList, HashSet, and HashMap.\",\n      \"topics\": [\n        \"Arrays (declaration, initialization, accessing elements)\",\n        \"Multi-dimensional Arrays\",\n        \"ArrayList\",\n        \"LinkedList\",\n        \"HashSet\",\n        \"HashMap\",\n        \"Iterators\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Exception Handling\",\n      \"chapterSummary\": \"This chapter explores Java's exception handling mechanism using try-catch blocks, finally blocks, and the throw/throws keywords. It covers different exception types and best practices.\",\n      \"topics\": [\n        \"Exceptions (checked and unchecked)\",\n        \"try-catch Blocks\",\n        \"finally Block\",\n        \"throw Keyword\",\n        \"throws Keyword\",\n        \"Custom Exceptions\",\n        \"Exception Handling Best Practices\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Input/Output (I/O)\",\n      \"chapterSummary\": \"This chapter introduces basic input/output operations, including console I/O (Scanner, System.out.println()) and file I/O (reading from and writing to files).\",\n      \"topics\": [\n        \"Console Input (Scanner class)\",\n        \"Console Output (System.out.println())\",\n        \"File Input/Output (FileReader, FileWriter, BufferedReader, BufferedWriter)\",\n        \"File Handling (creating, reading, writing files)\"\n      ]\n    }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });

    export const generateNotesAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate exam material detail content for each chapter ,Make sure to include all points in the content, make sure to give content in HTML format(Do not Add HTML, Head, Body, title tag),The chapter:\n {\n      \"chapterTitle\": \"Introduction to React\",\n      \"chapterSummary\": \"This chapter introduces React, its core concepts, and why it's used. We'll cover JSX, components, and the virtual DOM.\",\n      \"topics\": [\n        \"What is React?\",\n        \"React's Advantages\",\n        \"JSX: JavaScript XML\",\n        \"Components (Functional and Class)\",\n        \"Virtual DOM and Reconciliation\"\n      ]\n    },\n    {"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```html\n<h3>Introduction to React</h3>\n<p>This chapter introduces React, its core concepts, and why it's used. We'll cover JSX, components, and the virtual DOM.</p>\n\n<h4>What is React?</h4>\n<ul>\n  <li>Definition of React as a JavaScript library for building user interfaces.</li>\n  <li>Explanation of its component-based architecture.</li>\n  <li>Comparison with other JavaScript frameworks (optional).</li>\n  <li>Mention of React's use in single-page applications (SPAs) and complex web applications.</li>\n</ul>\n\n<h4>React's Advantages</h4>\n<ul>\n  <li>Performance benefits due to the virtual DOM.</li>\n  <li>Reusable components leading to efficient development.</li>\n  <li>Large and active community support.</li>\n  <li>Declarative programming paradigm (focus on what to render, not how).</li>\n  <li>Easy integration with other libraries and tools.</li>\n</ul>\n\n<h4>JSX: JavaScript XML</h4>\n<ul>\n  <li>Explanation of JSX syntax and its purpose.</li>\n  <li>How JSX simplifies writing HTML-like structures within JavaScript.</li>\n  <li>Examples of JSX code snippets, including embedding JavaScript expressions.</li>\n  <li>Babel's role in transpiling JSX into JavaScript.</li>\n</ul>\n\n<h4>Components (Functional and Class)</h4>\n<ul>\n  <li>Concept of components as building blocks of React applications.</li>\n  <li>Explanation of functional components (using arrow functions) and their simplicity.</li>\n  <li>Introduction to class components (using ES6 classes) and their lifecycle methods (optional, can be a separate section).</li>\n  <li>Props (properties): passing data to components.</li>\n  <li>State: managing internal data within components.</li>\n  <li>Examples illustrating both functional and class components.</li>\n</ul>\n\n<h4>Virtual DOM and Reconciliation</h4>\n<ul>\n  <li>Explanation of the virtual DOM as a lightweight representation of the actual DOM.</li>\n  <li>How the virtual DOM improves performance by minimizing direct DOM manipulations.</li>\n  <li>The process of reconciliation: comparing the previous and updated virtual DOMs.</li>\n  <li>Efficient updates: only updating the necessary parts of the actual DOM.</li>\n  <li>Diagram illustrating the virtual DOM and reconciliation process (optional).</li>\n</ul>\n\n\n```\n"},
          ],
        },
      ],
    });
  
   export const GenerateStudyTypeContentAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the Flashcard on topic:Flutter Fundamentals,User Interface(UI) Development,Basic App Navigation in JSON format with front back content, Maximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"front\": \"What is a Widget in Flutter?\",\n    \"back\": \"A Widget is the fundamental building block of a Flutter UI.  Everything you see on the screen is a widget, whether it's a button, text, image, or even the layout itself.\"\n  },\n  {\n    \"front\": \"What are the two main types of Widgets?\",\n    \"back\": \"StatelessWidget and StatefulWidget. StatelessWidgets don't change their state (data) over time, while StatefulWidgets can.\"\n  },\n  {\n    \"front\": \"Explain the difference between StatelessWidget and StatefulWidget.\",\n    \"back\": \"StatelessWidgets are immutable; their UI doesn't change after build. StatefulWidgets have a mutable state and rebuild when their state changes.\"\n  },\n  {\n    \"front\": \"What is a `BuildContext`?\",\n    \"back\": \"A `BuildContext` provides information about the location of a widget within the widget tree.  It's used to access things like the theme and parent widgets.\"\n  },\n  {\n    \"front\": \"How to build a simple text widget?\",\n    \"back\": \"Use `Text('Your text here')`.\"\n  },\n  {\n    \"front\": \"What is the purpose of a `Scaffold` widget?\",\n    \"back\": \"A `Scaffold` provides a basic visual layout structure for your app, including an AppBar, body, and other common elements.\"\n  },\n  {\n    \"front\": \"How to navigate to a new route/screen in Flutter?\",\n    \"back\": \"Use `Navigator.push(context, MaterialPageRoute(builder: (context) => YourNewScreen()))`.\"\n  },\n  {\n    \"front\": \"How to pop/go back to the previous screen?\",\n    \"back\": \"Use `Navigator.pop(context)`.\"\n  },\n  {\n    \"front\": \"What is `MaterialApp`?\",\n    \"back\": \"A `MaterialApp` widget provides a Material Design implementation for your app, including default theming and other Material components.\"\n  },\n  {\n    \"front\": \"What is `Column` and `Row`?\",\n    \"back\": \"`Column` arranges widgets vertically, `Row` arranges widgets horizontally.\"\n  },\n  {\n    \"front\": \"What is `Container` widget used for?\",\n    \"back\": \"A `Container` widget is a basic layout widget that provides padding, margin, background color, and other styling options to its child widget(s).\"\n  },\n  {\n    \"front\": \"What is `Expanded` widget used for?\",\n    \"back\": \"An `Expanded` widget allows a child widget within a `Row` or `Column` to expand and fill the available space.\"\n  },\n  {\n    \"front\": \"How to handle user input with a `TextField`?\",\n    \"back\": \"Use a `TextField` widget and access its entered text via its `controller` property (e.g., `TextEditingController`).  You would typically use `onChanged` to capture real-time input and possibly `onSubmitted` to capture input upon pressing 'Enter'.\"\n  },\n  {\n    \"front\": \"What is the purpose of `setState()`?\",\n    \"back\": \"In a StatefulWidget, `setState()` rebuilds the UI after changes to the state have been made.  It's crucial for updating the app's display to reflect the new data.\"\n  },\n  {\n    \"front\": \"What is a named route?\",\n    \"back\": \"A named route allows you to navigate to a screen using a string identifier instead of a route builder.  Useful for managing many routes and deep linking.\"\n  }\n]\n```\n"},
          ],
        },
      ],
    })
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
  
  
